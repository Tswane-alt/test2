 ShopEZ - Mobile Shopping App
A complete React Native shopping application with Firebase authentication, real-time database, and offline persistence.
📋 Features

✅ User Registration & Login with email/password
✅ Persistent authentication across app restarts
✅ Product listing from Fake Store API
✅ Category filtering
✅ Product detail view with add to cart
✅ Shopping cart with quantity management
✅ Real-time Firebase database sync
✅ Offline cart persistence with AsyncStorage
✅ User-specific cart data (Firebase security)
✅ Clean, responsive UI with React Native styling

🚀 Quick Start
Prerequisites

Node.js (v14 or higher)
npm or yarn
Expo CLI (for Expo projects) or React Native CLI
Firebase account

Installation

Clone the repository

bashgit clone <your-repo-url>
cd shopez

Install dependencies

bashnpm install
# or
yarn install

Install required packages

bash# For Expo
expo install firebase @react-navigation/native @react-navigation/stack @react-native-async-storage/async-storage

# For React Native CLI
npm install firebase @react-navigation/native @react-navigation/stack @react-native-async-storage/async-storage
npm install react-native-screens react-native-safe-area-context
Firebase Setup

Create a Firebase Project

Go to Firebase Console
Click "Add Project"
Follow the setup wizard


Enable Authentication

In Firebase Console, go to Authentication
Click "Get Started"
Enable "Email/Password" sign-in method


Set up Realtime Database

Go to Realtime Database in Firebase Console
Click "Create Database"
Start in test mode (we'll add security rules next)


Configure Security Rules
Add these rules to your Realtime Database:

json   {
     "rules": {
       "carts": {
         "$uid": {
           ".read": "$uid === auth.uid",
           ".write": "$uid === auth.uid"
         }
       }
     }
   }

Get Firebase Config

Go to Project Settings (gear icon)
Scroll to "Your apps" section
Click the web icon (</>)
Copy your Firebase configuration


Add Firebase Config to App
Replace the config in App.js or create a firebaseConfig.js:

javascript   const firebaseConfig = {
     apiKey: "YOUR_API_KEY",
     authDomain: "YOUR_PROJECT.firebaseapp.com",
     databaseURL: "https://YOUR_PROJECT.firebaseio.com",
     projectId: "YOUR_PROJECT_ID",
     storageBucket: "YOUR_PROJECT.appspot.com",
     messagingSenderId: "YOUR_SENDER_ID",
     appId: "YOUR_APP_ID"
   };
Running the App
For Expo:
bashexpo start
# Then press 'i' for iOS simulator or 'a' for Android emulator
For React Native CLI:
bash# iOS
npx react-native run-ios

# Android
npx react-native run-android
📦 Package Versions
json{
  "dependencies": {
    "react": "18.2.0",
    "react-native": "0.72.0",
    "firebase": "^10.7.1",
    "@react-navigation/native": "^6.1.9",
    "@react-navigation/stack": "^6.3.20",
    "@react-native-async-storage/async-storage": "^1.19.5",
    "react-native-screens": "^3.27.0",
    "react-native-safe-area-context": "^4.7.4",
    "react-native-gesture-handler": "^2.13.4"
  }
}
🏗️ Project Structure
shopez/
├── App.js                 # Main app component with navigation
├── screens/
│   ├── LoginScreen.js     # User login
│   ├── RegisterScreen.js  # User registration
│   ├── ProductListScreen.js   # Product listing with filters
│   ├── ProductDetailScreen.js # Product details
│   └── CartScreen.js      # Shopping cart
├── config/
│   └── firebaseConfig.js  # Firebase configuration
├── utils/
│   └── validation.js      # Input validation helpers
├── styles/
│   └── styles.js          # Global styles
└── README.md
🔐 Firebase Security Rules Explanation
The security rules ensure that:

Each user can only read their own cart data
Each user can only write to their own cart
Unauthenticated users cannot access cart data

json{
  "rules": {
    "carts": {
      "$uid": {
        ".read": "$uid === auth.uid",   // User can only read their cart
        ".write": "$uid === auth.uid"   // User can only write their cart
      }
    }
  }
}
📱 App Screens
1. Login Screen

Email and password input
Form validation
Error handling for invalid credentials
Link to registration screen

2. Registration Screen

Email, password, and confirm password fields
Password strength validation (min 6 characters)
Password match validation
Firebase error handling (email already in use, etc.)

3. Product List Screen

Displays all products from Fake Store API
Category filter buttons (All, Electronics, Jewelery, etc.)
Grid layout with product images, titles, and prices
Cart icon with item count badge
Logout button

4. Product Detail Screen

Full product information (image, title, description, price)
Product rating and review count
Quantity selector
Add to Cart button
Back navigation

5. Cart Screen

List of cart items with images
Quantity controls (increase/decrease)
Remove item functionality
Real-time total calculation
Checkout button
Empty cart state

🎨 Styling Features

Color Scheme: Primary color #FF6B6B (coral red)
Typography: System fonts with varied weights
Layout: Flexbox-based responsive design
Components: Custom styled buttons, inputs, and cards
Shadows: Subtle shadows for depth
Feedback: Button press opacity changes
Loading States: Activity indicators for async operations

💾 State Management
Authentication State

Managed by Firebase Auth
Persisted automatically by Firebase
Auth state listener updates UI on changes

Cart State

Online: Stored in Firebase Realtime Database
Offline: Cached in AsyncStorage
Real-time synchronization when online
Falls back to local cache when offline

Product State

Fetched from Fake Store API
Managed with React useState hooks
Filtered by category in component state

🔄 Data Flow

User Login → Firebase Auth → Update Auth State → Navigate to Products
Fetch Products → Fake Store API → Update Product State → Render List
Add to Cart → Update Firebase DB → Save to AsyncStorage → Update Cart Count
View Cart → Load from Firebase → Fallback to AsyncStorage → Display Items
Logout → Firebase signOut → Clear Auth State → Navigate to Login

🛡️ Error Handling

Network errors with retry options
Firebase authentication errors with user-friendly messages
Form validation errors with inline feedback
Loading states to prevent duplicate actions
Graceful fallback to cached data when offline

🧪 Testing the App

Register a new user

Use email: test@example.com
Password: test123


Browse products

View all products
Filter by category
Tap a product to see details


Add items to cart

Select quantity
Tap "Add to Cart"
Check cart badge updates


View cart

Modify quantities
Remove items
View total


Test persistence

Close and reopen app
User should still be logged in
Cart should persist


Test offline mode

Disconnect internet
Cart should still display
Reconnect to sync changes



📸 Screenshots
Login Screen

Clean authentication form
Error message display
Link to registration

Product List

Grid layout with product cards
Category filter chips
Cart badge with count

Product Detail

Large product image
Full description
Quantity selector
Add to Cart button

Shopping Cart

Cart items with images
Quantity controls
Total calculation
Checkout button

🚨 Common Issues & Solutions
Issue: Firebase not initialized
Solution: Ensure firebaseConfig is correctly set with your project credentials
Issue: Products not loading
Solution: Check internet connection and Fake Store API status
Issue: Cart not persisting
Solution: Verify Firebase Realtime Database is enabled and rules are set correctly
Issue: Authentication errors
Solution: Ensure Email/Password auth is enabled in Firebase Console
Issue: AsyncStorage not working
Solution: Make sure @react-native-async-storage/async-storage is properly installed and linked
🔧 Configuration Options
Firebase Config Location
You can place Firebase config in:

App.js directly
firebaseConfig.js (recommended)
.env file with environment variables

API Endpoints

Products: https://fakestoreapi.com/products
Categories: https://fakestoreapi.com/products/categories
Single Product: https://fakestoreapi.com/products/{id}

📝 Development Notes
State Persistence Strategy

Primary: Firebase Realtime Database (cloud sync)
Secondary: AsyncStorage (local cache)
Fallback: Component state (temporary session)

Authentication Flow

App loads → Check Firebase auth state
If authenticated → Navigate to Products
If not authenticated → Show Login screen
On login → Firebase persists auth token
On app restart → Auto-login with persisted token

Cart Synchronization

Every cart update writes to both Firebase and AsyncStorage
On app load, tries Firebase first, falls back to AsyncStorage
When online status changes, syncs local changes to Firebase

🎯 Future Enhancements

 Search functionality
 Wishlist feature
 Order history
 User profile management
 Payment integration
 Push notifications
 Product reviews and ratings
 Social sharing
 Dark mode support

📄 License
MIT License - Feel free to use this project for learning and development.
👥 Credits

Fake Store API: Product data provider
Firebase: Authentication and database
React Native: Mobile framework

🤝 Contributing
Contributions are welcome! Please feel free to submit a Pull Request.
📧 Support
For issues or questions:

Check existing GitHub issues
Create a new issue with detailed description
Include screenshots if applicable